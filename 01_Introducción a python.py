#!/usr/bin/env python
# coding: utf-8

# <img src="OriginalLogo.jpg" alt="El taller de datos" width="500"/>
# 

# 
# 
# #### M√≥dulo 1: Python para la ciencia de datos
# 
# # 1. Introducci√≥n a Python. Lenguaje de programaci√≥n y Sintaxis b√°sica
# 
# #### Contenidos:
# * [Primeras instrucciones](#1)
# * [Variables](#2)
# * [N√∫meros](#3)
# * [Cadenas de texto (strings)](#4)
# * [Booleanos](#5)
# * [Prioridad de operaciones](#6)
# * [Estructuras alternativas IF-ELSE](#7)
# * [Estructuras repetitivas WHILE](#8)
# * [Estructuras repetitivas FOR](#9)
# * [Entrada-Salida est√°ndar](#10)
# 
# 
# Python:
# 
# üìö Lenguaje de programaci√≥n: Ideal para principiantes y expertos.
# 
# üéØ Prop√≥sito general: Usado en desarrollo web, ciencia de datos, automatizaci√≥n, y m√°s.
# 
# üîÑ Multiparadigma: Soporta programaci√≥n orientada a objetos, funcional, y procedimental.
# 
# ‚öôÔ∏è Caracter√≠sticas principales:
# 
# üìú C√≥digo limpio y legible: Sintaxis simple y clara.
# 
# üöÄ Tipado din√°mico: No necesitas declarar tipos de datos.
# 
# üîÑ Interpretado: Ejecuta el c√≥digo l√≠nea por l√≠nea sin necesidad de compilar.
# 
# üíª Multiplataforma: Funciona en Windows, macOS y Linux.
# 
# ## üß† Ventajas:
# 
# ‚åõ Ahorra tiempo: Menos l√≠neas de c√≥digo para tareas complejas.
# 
# üåç Gran comunidad: Amplia documentaci√≥n, bibliotecas y soporte.
# 
# üõ†Ô∏è Gesti√≥n autom√°tica de memoria: Facilita la programaci√≥n y reduce errores.
# 
# üöß Consideraciones:
# 
# üê¢ Puede ser m√°s lento que lenguajes compilados como C o Java.
# 
# üé¢ Curva de aprendizaje: Inicialmente puede ser abrumador debido a la cantidad de herramientas disponibles.
# 
# 
# 
# ## 1.1 Primeras instrucciones <a class="anchor" id="1"></a>
# 
# Vamos a comenzar con las instrucciones m√°s b√°sicas que podemos usar en Python
# 
# 
# 
# ## 1.1 Primeras instrucciones <a class="anchor" id="1"></a>
# 
# Vamos a comenzar con las instrucciones m√°s b√°sicas que podemos usar en Python

# # Ejercicio 1: Imprimir un Mensaje en la Consola
# 
# Objetivo: Aprender a usar la funci√≥n print() para mostrar mensajes en la consola.
# 
# Instrucci√≥n: Escribe un programa que imprima "¬°Hola, mundo!" en la consola.

# In[1]:


print("¬°Hola, mundo!")


# # Ejercicio 2: Uso de la Funci√≥n help()
# 
# Objetivo: Familiarizarte con la documentaci√≥n de Python directamente en la consola.
# Instrucci√≥n: Usa la funci√≥n help() para obtener informaci√≥n sobre cualquier funci√≥n o m√≥dulo de Python.

# In[2]:


help('print')


# ## 1.2 Variables <a class="anchor" id="2"></a>
# 
# En programaci√≥n, las variables son contenedores que almacenan datos, y el tipo de variable determina el tipo de datos que se pueden almacenar en ellas. En Python (y otros lenguajes de programaci√≥n), existen varios tipos de variables que definen el tipo de datos que pueden almacenar. Aqu√≠ te explico los principales tipos de variables en Python:
# 
# üî¢ Flotantes (float): Guardan n√∫meros decimales o fraccionarios.
# 
# üìù Cadenas de texto (str): Contienen secuencias de caracteres, como palabras o frases.
# 
# ‚úÖ ‚ùå Booleanos (bool): Almacenan valores de verdadero o falso.
# 
# üìã Listas (list): Son colecciones de elementos ordenados que pueden contener cualquier tipo de dato.
# 
# üì¶ Tuplas (tuple): Similares a las listas, pero inmutables (no se pueden modificar despu√©s de ser creadas).
# 
# üé≤ Conjuntos (set): Almacenan elementos √∫nicos, sin duplicados, en una colecci√≥n no ordenada.
# 
# üîëüìÑ Diccionarios (dict): Guardan pares clave-valor, donde cada valor est√° asociado a una clave √∫nica.
# 
# ‚ùì NoneType: Representa la ausencia de valor o la falta de asignaci√≥n de un valor.
# 
# En Python, al ser de tipado din√°mico, el tipo de variable se asigna autom√°ticamente seg√∫n el valor dado.

# # Ejercicio 3: Crear tu Primera Variable
# Objetivo: Aprender a definir y usar variables.
# Instrucci√≥n:
# Define una variable llamada nombre que almacene tu nombre y luego impr√≠melo con un mensaje personalizado.

# In[10]:


nombre = "Silvia"
print("Hola, " + nombre + "!")


# In[3]:


x = 5


# In[4]:


type(x)


# In[5]:


x = 5.0


# In[6]:


type(x)


# In[7]:


print(x)


# In[8]:


print(y)


# Una vez que hemos visto c√≥mo asignar valor a una variable, vamos a hacer un repaso de los tipos m√°s b√°sicos que podemos utilizar en Python
# 
# ## 1.3 N√∫meros <a class="anchor" id="3"></a>
# 
# Vamos a comenzar a probar Python como una gran calculadora

# In[ ]:


2+2


# In[ ]:


8-2*2


# In[ ]:


(8-2)*2


# In[ ]:


8//5


# In[ ]:


8/5


# In[ ]:


11%2


# In[ ]:


5**2


# Python tiene incluidos varios tipos de datos num√©ricos. Los tipos b√°sicos son int (enteros), float (reales) y complex (complejos).
# 
# N√∫meros enteros:
# - los definimos sin incluir decimales
# - la aritm√©tica de n√∫meros enteros es muy potente en Python y no tiene l√≠mites (excepto el de la memoria). 

# In[ ]:


5


# In[ ]:


2**689-1


# Los n√∫meros reales se definen mediante el uso de decimales.

# In[ ]:


5.0


# In[ ]:


1.0+2*10**-16


# Los n√∫meros complejos se definen mediante una parte real y una parte imaginaria utilizando la letra j

# In[ ]:


5+1j


# En cualquier caso, podemos conocer el tipo mediante la instrucci√≥n type

# In[ ]:


type(1)


# In[ ]:


type(1.0)


# In[ ]:


type(1+0j)


# Adem√°s, podemos operar con n√∫meros de distintos tipos, en cuyo caso el resultado ser√° el tipo m√°s general que aparezca en la operaci√≥n

# In[ ]:


type(2+3)


# In[ ]:


type(2+3.0)


# In[ ]:


type(2+(3+0j))


# Podemos tambi√©n transformar n√∫meros de un tipo a otro utilizando el nombre del tipo a modo de funci√≥n

# In[ ]:


int(5.4)


# In[ ]:


float(3)


# In[ ]:


complex(2.5)


# Para m√°s informaci√≥n y otras funciones: 
# 
# ## 1.4 Cadenas de texto (strings) <a class="anchor" id="4"></a>
# 
# El tipo string lo forman una cadena de caracteres encerrada entre comillas dobles o ap√≥strofes

# In[ ]:


'Hola mundo'


# In[ ]:


"Hola mundo"


# In[ ]:


type('Hola mundo')


# In[ ]:


type("Hola mundo")


# Podemos incluir (sin necesidad de usar caracteres especiales) las dobles comillas o los ap√≥strofes dentro del propio string

# In[ ]:


'Hola "mundo" hola'


# In[ ]:


"Hola 'mundo' hola"


# E incluso podemos utilizar las triples comillas para introducir saltos de l√≠nea.

# In[ ]:


print("""Hola
mundo""")


# In[ ]:


print('''Hola
mundo''')


# En realidad, lo que estamos haciendo es introducir el caracter especial \n como salto de l√≠nea dentro del string

# In[ ]:


"""Hola
mundo"""


# De la misma manera, podr√≠amos haberlo introducido manualmente el caracter \n o cualquier otro caracter especial.

# In[ ]:


print("Hola\nmundo")


# print("Hola\tmundo")

# In[ ]:


print("Hola\\mundo")


# El tipo string permite realizar un acceso individualizado a cada caracter

# In[ ]:


s = "Python"


# In[ ]:


s[0]


# In[ ]:


s[1]


# In[ ]:


s[2]


# In[ ]:


s[3]


# In[ ]:


s[4]


# In[ ]:


s[5]


# De la misma manera que con los n√∫meros, podemos "operar" entre strings. Ver√°s que hay varios operadores que tienen diferentes acciones en funci√≥n del tipo de variable con el que operan. Ejemplos son los operadores sobrecargados + y *.

# In[ ]:


'Hola' + ' Mundo'


# In[ ]:


'Hola Mundo ' * 3


# Y tambi√©n podemos transformar varibales de tipo num√©rico a string, y viceversa.

# In[ ]:


str(5)


# In[ ]:


str(4.3)


# Python disponen de multitud de funciones built-in que permiten manejar los strings de manera muy c√≥moda (https://docs.python.org/3.7/library/stdtypes.html#string-methods). Estas funciones nos permiten pasar los strings a may√∫sculas, min√∫sculas, contar el n√∫mero de caracteres, encontrar la posici√≥n de un determinado caracter, etc. Una de las m√°s b√°sicas es la funci√≥n `len`.

# In[ ]:


len('Hola')


# ## 1.5 Booleanos <a class="anchor" id="5"></a>
# 
# El √∫ltimo tipo que vamos a ver en esta introducci√≥n es el tipo Booleano (verdadero o falos), representados por los valores True y False

# In[ ]:


a = True


# In[ ]:


type(a)


# In[ ]:


b = False


# In[ ]:


type(b)


# En realidad, en Python cualquier variable "nula" tiene el caracter False (el 0, el 0.0,...). Cualquier otro valor es considerado True. Esto podemos verlo f√°cilmente mediante la funci√≥n bool que nos permite transformar una variable a tipo booleano.

# In[ ]:


a = 0.0
bool(a)


# In[ ]:


a = 5
bool(a)


# El tipo de variable boolenaa tiene asociados varios operadores, tanto unarios como binarios (de comparaci√≥n). Los m√°s utilizados son:
# * `>`: Mayor 
# * `<`: Menor 
# * `>=`: Mayor o igual 
# + `<=`: Menor o igual
# * `==` igualdad
# * `and`: conjunci√≥n
# * `or`: disyunci√≥n
# * `not`: negaci√≥n

# In[ ]:


5 > 4


# In[ ]:


(5<=3) and (4>2)


# In[ ]:


2-2==1/2


# In[ ]:


2-2==1//2


# ## 1.6 Prioridad de operaciones <a class="anchor" id="6"></a>
# 
# Al igual que en otros lenguajes de programaci√≥n, podemos a√±adir consecutivamente varias operaciones, debiendo tener en cuenta las prioridades que existen entre operadores. Ante la duda, la separaci√≥n de expresiones excesivamente largas en varias etapas puede ser una buena alternativa. En cualquier caso, el orden de mayor a menor prioridad es:
# * Par√©ntesis
# * Exponentes
# * Multiplicaci√≥n y divisi√≥n
# * Sumas y restas
# * Operadores l√≥gicos
# 
# Cuando en una secuencia hay varios operadores de la misma prioridad, la ejecuci√≥n ser√° siempre de izquierda a derecha

# In[ ]:


5-2**2


# In[ ]:


5-2-1


# In[ ]:


True or True and False


# ## 1.7 Estructuras alternativas IF-ELSE <a class="anchor" id="7"></a>
# 
# La estructura alternativa IF-ELSE se utiliza en Python de la siguiente manera:
# 
# python
# Copiar c√≥digo
# if condicion:
#     instruccion o lista de instrucciones
# Los puntos clave a tener en cuenta sobre la sintaxis en Python son los siguientes:
# 
# Debemos colocar dos puntos (:) justo despu√©s de la condici√≥n.
# Todas las instrucciones que forman parte del bloque IF deben estar indentadas. La indentaci√≥n es lo que permite agrupar una secuencia de instrucciones dentro de una estructura de control, similar al uso de begin-end o {} en otros lenguajes.
# 

# In[ ]:


if condicion:
    instruccion o lista de instrucciones


# In[ ]:


a = 6
if a > 5:
    print('la variable es mayor que 5')


# Si queremos introducir un bloque ELSE, escribiremos:
# 
# `if condicion:
#     instruccion o lista de instrucciones
#  else:
#     instruccion o lista de instrucciones`

# In[ ]:


a = 6
if a > 5:
    print('la variable es mayor que 5')
else:
    print('la variable no es mayor que 5')


# Podemos seguir anidando m√°s bloques alternativos dentro de otros

# In[ ]:


a = 5
if a > 5:
    print('la variable es mayor que 5')
else:
    if a < 5:
        print('la variable es menor que 5')
    else:
        print('la variable es igual a 5')


# Sin embargo, cuando tenemos varias condiciones sobre el mismo conjunto de variables, podemos utilizar la contracci√≥n `elif` para ir secuenciando las condiciones.

# In[ ]:


a = 4
if a > 5:
    print('la variable es mayor que 5')
elif a < 5:
    print('la variable es menor que 5')
else:
    print('la variable es igual a 5')


# ## 1.8 Estructuras repetitivas WHILE <a class="anchor" id="8"></a>
# 
# a estructura WHILE nos permite repetir una secuencia de instrucciones mientras se cumpla una condici√≥n. La sintaxis es muy similar a la de la estructura IF, y se escribe de la siguiente manera:
# 
# 
#     instrucci√≥n o lista de instrucciones
# Durante la ejecuci√≥n, las instrucciones dentro del bloque while se seguir√°n repitiendo hasta que la condici√≥n deje de ser verdadera. Al igual que en otras estructuras, es importante recordar que las instrucciones dentro del bloque deben estar indentadas para pertenecer al ciclo while.

# In[ ]:


while condicion:
    instrucci√≥n o lista de instrucciones


# In[ ]:


x = 5
while x >= 0:
    print (x)
    x = x-1


# La instrucci√≥n `break` nos permite romper la ejecuci√≥n del while sin atender a la condici√≥n

# In[ ]:


x = 9
y = 0
while x >= 0:
    print(x)
    x = x - 1
    y = y + 2
    if x == y:
        print('Las variables tienen el mismo valor')
        break
    


# Aunque a veces no tenga demasiada utilizada, las estructuras while disponen tambi√©n de una instrucci√≥n `else`, que se ejecutar√° √∫nicamente cuando la condici√≥n del while se eval√∫e a `False`

# In[ ]:


x = 9
y = 1
while x >= 0:
    print(x)
    x = x - 1
    y = y + 2
    if x == y:
        print('Las variables tienen el mismo valor')
        break
else:
    print('Las variables nunca han alcanzado el mismo valor')


# ## 1.9 Estructuras repetitivas FOR <a class="anchor" id="9"></a>
# 
# Cuando la repetici√≥n de una secuencia de instrucciones no depende de una condici√≥n, podemos utilizar la estructura FOR de la siguiente manera:
# 
# `for variable in elemento_iterable:
#     instrucci√≥n o secuencia de instrucciones`
#     
# El concepto de elemento iterable (lo veremos con m√°s profunidad en el siguiente tema) debe ser una variable (expl√≠cita o no) que contenga un conjunto de elementos por los que ir iterando. Ve√°moslo con un ejemplo:

# In[ ]:


for x in [5, 7 ,-1]:
    print(x)


# En el ejemplo anterior, el conjunto iterable es una lista de elementos. La estructura for va iterando sobre dicha lista, asignando a la variable x cada uno de los elementos que aparecen en la lista.

# In[ ]:


for palabra in ['Hola', 'que', 'tal']:
    print(palabra)


# Incluso los propios `strings` pueden considerarse como elementos iterables, pudiendo f√°cilmente hacer un recorrido por sus caracteres.

# In[ ]:


for letra in 'Experto':
    print(letra)


# Sin embargo, la mayor√≠a de las veces queremos utilizar la estructura FOR para ejecutar un n√∫mero concreto de iteraciones (por ejemplo, 10). En este caso, podr√≠amos hacer lo siguiente...

# In[ ]:


for i in [0,1,2,3,4,5,6,7,8,9]:
    print(i)


# ...Pero no tiene mucho sentido cuando el n√∫mero de ejecuciones sea mucho m√°s grande (100, 1000). Para ello, podemos utilizar la funci√≥n `range`, que nos devuelve un elemento iterable (lista) con los n√∫meros que especifiquemos. Por ejemplo, `range(10)` nos devolver√° un iterables como el del ejemplo anterior.

# In[ ]:


for i in range(10):
    print(i)


# La funci√≥n `range` posee adem√°s otros par√°metros optativos que nos permiten mayor flexibilidad en los elementos iterables.

# In[ ]:


for i in range(5, 10):
    print(i)


# In[ ]:


for i in range(0, 10, 3):
    print(i)


# Al igual que ocurre en la estructura WHILE, podemos romper la ejecuci√≥n del FOR antes de "agotar" el elemento iterable mediante la instrucci√≥n `break`. Tambi√©n disponemos de una instrucci√≥n `else` que se ejecutar√° como √∫ltima instrucci√≥n una vez agotado el elemento iterable.

# ## 1.10 Entrada-salida est√°ndar <a class="anchor" id="10"></a>
# 
# Por √∫ltimo, vamos a ver c√≥mo leer/escribir informaci√≥n desde y hacia el exterior a trav√©s del teclado y la pantalla, lo cual ser√° √∫til para estas primeras semanas de entrenamiento.
# 
# La entrada de datos por teclado la realizaremos mediante la instrucci√≥n `input`, que nos devolver√° un string recogido del teclado.

# In[ ]:


x = input('Introduce algo: ')
print(x)


# Es importante recordar que la entrada siempre es de tipo string y, por tanto, debemos transformar las variables al tipo necesario antes de poder operar con ellas.

# In[ ]:


x = input('Introduce un numero: ')
x = x + 1
print(x)


# In[ ]:


x = int(input('Introduce un numero: '))
x = x + 1
print(x)


# La salida de datos por pantalla la haremos mediante la instrucci√≥n `print`. El print nos permite concatenar sucesivas variables o literales.

# In[ ]:


print('hola', ' que', ' tal')


# In[ ]:


print('El numero es ', 5)


# In[ ]:


x = 5
print('El numero es ', x)


# In[ ]:


x = 5
print('El numero es ', x, ' y el siguiente es ', x+1)


# De una manera muy parecida a C, podemos utilizar caracteres especiales para el formato del string, utilizando `%d` (para enteros), `%f` (para reales), etc...

# In[ ]:


x = 4
l = 3.14 * 2 * x
print('La longitud de la circunferencia es %f' % l)


# Otra forma m√°s simple de poder combinar variables y literales es la utilizaci√≥n del m√©todo `format`. Lo que hacemos con este m√©todo es "formatear" un string supliendo los huecos con valores de variables.

# In[ ]:


print("Numeros {} y {}".format(1, 3))


# In[ ]:


x = 4
print('La longitud de la circunferencia es {}'.format(2*3.14159*x))


# In[ ]:


x = 4
print('La longitud de la circunferencia es {:.2f}'.format(2*3.14159*x))


# Podemos incluso numerar los huecos

# In[ ]:


print("Hola {0} y {1}".format('Pepe', 'Antonio'))


# In[ ]:


print("Hola {1} y {0}".format('Pepe', 'Antonio'))


# In[ ]:


print("Hola {0}, {1}, {1} y {0}".format('Pepe', 'Antonio'))


# In[ ]:




